log = console~log

$ = (selector, root=document.body) ->
  if typeof selector is \string
    el = root.querySelector selector
  else
    el = selector

  on:  (type, cb) -> el.addEventListener    type, cb
  off: (type, cb) -> el.removeEventListener type, cb
  add: -> el.appendChild it
  replaceWith: -> el.parentNode.replaceChild it, el
  scrollBy: (dx, dy) ->
    el.scrollLeft += dx
    el.scrollTop  += dy
  scrollTo: (x, y) ->
    el.scrollLeft = x
    el.scrollTop  = y
  el: el

export IV =
  init: (urls) ->
    IV.overlay = $ \#iv
      &on \mousewheel IV.wheel
      &on \mousedown  IV.dragstart
      &on \click      IV.click

    IV.imgs =
      for url of urls
        let
          el = new Image
            &src = url
          $el = $ el
          img = { el, $el, dirty: false }
          $el.on \load ->
            img{width, height} = @
          img

    IV.index = 0
    IV.img = IV.imgs[IV.index]
    IV.img.$el.on \load ->
      IV.overlay.add @
      IV.resize!

    $ window .on \resize IV.resize

  resize: ->
    {img, overlay} = IV
    {clientWidth:ow, clientHeight:oh} = overlay.el
    {width, height} = img
    if (width > ow) or (height > oh)
      scale = Math.min (ow / width), (oh / height)
      img.minWidth = width * scale | 0
    else
      img.minWidth = width

    unless img.dirty
      img.el.width = img.minWidth

  next: -> IV.delta +1
  prev: -> IV.delta -1
  delta: ->
    l = IV.imgs.length
    IV.index = (<> + it + l) % l # negative modulo
    {$el} = IV.img
    IV.img = IV.imgs[IV.index]
    IV.resize!
    $el.replaceWith IV.img.el

  wheel: (e) ->
    {x, y} = e
    e.preventDefault!
    scale = if e.wheelDelta > 0 then 1.1 else 0.9

    {scrollLeft:sx, scrollTop:sy} = IV.overlay.el
    x0 = sx + x
    y0 = sy + y

    {img} = IV
    {el} = img
    oldWidth = el.width
    el.width = Math.max Math.min(<> * scale, img.width), img.minWidth
    scale = el.width / oldWidth

    x1 = x0 * scale - x
    y1 = y0 * scale - y

    IV.overlay.scrollTo x1, y1

    IV.img
      &dirty = &el.width !== &minWidth

  click: ({button}) ->
    return if IV.img.dirty
    switch button
    case 0
      IV.next!
    case 1
      IV.prev!

  dragstart: (IV{x, y}) ->
    $ window
      &on \mousemove IV.dragmove
      &on \mouseup   IV.dragend

  dragmove: ({x, y}) ->
    IV
      &overlay.scrollBy IV.x - x, IV.y - y
      &x = x
      &y = y

  dragend: ->
    $ window
      &off \mousemove IV.dragmove
      &off \mouseup   IV.dragend
