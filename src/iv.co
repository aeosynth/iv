log = console~log

$ = require \$
K = require \keys
doc = document.documentElement

observe = !(obj, key, cb) ->
  obj <<< "#key":~
    -> obj["_#key"]
    (val) ->
      obj["_#key"] = val
      cb val

IV =
  init: (urls, {index || 0, wheel || false}={}) ->
    IV.stylesheet = $ "<style>#{IV.css}</style>"
      &addTo document.head
    IV.overlay = $ '<div id="iv">'
      &on \mousedown  IV.dragstart
      &on \click      IV.click
      &addTo document.body
    if wheel
      IV.on \mousewheel IV.mousewheel # chrome
      IV.on \wheel      IV.wheel      # fox
    IV.meta = $ '<ul id="iv-meta">
        <li></li>
        <li></li>
        <li>continuous</li>
      </ul>'
      &addTo IV.overlay.el

    IV.imgs = for let url of urls
      el = new Image
        &src = url
      $el = $ el
      img = { el, $el, dirty: false }
      $el.on \load ->
        img{width, height} = @
      img

    # set it after defining IV{meta, imgs}
    observe IV, \index       IV.obsIndex
    observe IV, \slideDelay  IV.obsDelay
    observe IV, \slideActive IV.obsActive
    observe IV, \continuous  IV.obsContinuous
    IV.index = index
    IV.slideDelay = 3e3
    IV.slideActive = false
    IV.continuous = false

    IV.img = IV.imgs[IV.index]
    IV.img.$el.on \load ->
      IV.overlay.add @
      IV.resize!

    $ window .on \resize  IV.resize

    for str, cb in IV.keybinds!
      for key of str / ' '
        IV.keyMap[key] = cb
    K IV.keyCB

  obsIndex:      -> IV.meta.el.children.0.textContent = "#{it+1}/#{IV.imgs.length}"
  obsDelay:      -> IV.meta.el.children.1.textContent = it
  obsActive:     -> IV.meta.el.children.1.hidden = !it
  obsContinuous: -> IV.meta.el.children.2.hidden = !it

  keyMap: {}

  keyCB: (e) ->
    if IV.keyMap[e.keys]
      e.preventDefault!
      that!

  keybinds: ->
    {scrollTo, scrollBy, el} = IV.overlay

    esc: IV.rm
    space: ->
      if IV.continuous and el.scrollTop + el.clientHeight < el.scrollHeight
        scrollBy 0, +el.clientHeight
      else
        IV.next!
    'shift+space': ->
      if IV.continuous and el.scrollTop > 0
        scrollBy 0, -el.clientHeight
      else
        IV.prev!
    c: -> ! = IV.continuous
    G: -> scrollTo el.scrollLeft, el.scrollHeight
    g: -> scrollTo el.scrollLeft, 0
    'F \'': -> IV.zoom -1
    'f ;': -> IV.zoom +1
    'H A': -> scrollBy -el.clientHeight, 0
    'J S': -> scrollBy 0, +el.clientHeight
    'K W': -> scrollBy 0, -el.clientHeight
    'L D': -> scrollBy +el.clientHeight, 0
    T: -> IV.slideDelayBump -1e3
    e: IV.slideToggle
    'h a': -> scrollBy -50   0
    'j s': -> scrollBy   0 +50
    'k w': -> scrollBy   0 -50
    'l d': -> scrollBy +50   0
    t: -> IV.slideDelayBump +1e3

  slideDelayBump: (dd) ->
    return unless IV.slideActive
    clearInterval IV.slideIntervalId
    IV.slideDelay += dd
    IV.slideIntervalId = setInterval IV.next, IV.slideDelay

  slideToggle: ->
    if ! = IV.slideActive
      IV.slideIntervalId = setInterval IV.next, IV.slideDelay
    else
      clearInterval IV.slideIntervalId

  rm: ->
    IV.overlay.rm!
    IV.stylesheet.rm!
    $ window .off \resize  IV.resize
    K.rm!
    if IV.slideActive
      clearInterval IV.slideIntervalId

  resize: ->
    {img} = IV
    {clientWidth:ow, clientHeight:oh} = doc
    {width, height} = img
    img.minWidth = if width > ow or height > oh
      scale = ow / width <? oh / height
      width * scale | 0
    else width

    /*
    unless img.dirty
      img.el.width = img.minWidth
    */

  next: -> IV.delta +1
  prev: -> IV.delta -1
  delta: ->
    l = IV.imgs.length
    IV.index = (<> + it + l) % l # negative modulo
    {$el} = IV.img
    IV.img = IV.imgs[IV.index]
    IV.resize!
    $el.replace IV.img.el

    if IV.continuous
      if it > 0
        IV.overlay.scrollTo IV.overlay.el.scrollLeft, 0
      else
        IV.overlay.scrollTo IV.overlay.el.scrollLeft, IV.overlay.el.scrollHeight

  wheel: (e) ->
    sign = if e.deltaY < 0 then +1 else -1
    IV.zoomWheel e, sign

  mousewheel: (e) ->
    sign = if e.wheelDelta > 0 then +1 else -1
    IV.zoomWheel e, sign

  zoomWheel: (e, sign) ->
    e.preventDefault!
    {clientX:x, clientY:y} = e
    IV.zoom sign, x, y

  zoom: (sign, x, y) ->
    {overlay, img} = IV
    unless x and y
      x = overlay.el.clientWidth  / 2
      y = overlay.el.clientHeight / 2

    scale = 1 + (sign * 0.1)
    {scrollLeft:sx, scrollTop:sy} = overlay.el
    x0 = sx + x
    y0 = sy + y

    {el} = img

    width = el.width * scale
    scale = (img.minWidth >? width <? img.width) / el.width
    el.width *= scale

    x1 = x0 * scale - x
    y1 = y0 * scale - y

    overlay.scrollTo x1, y1

    IV.img
      &dirty = &el.width !== &minWidth

  click: ({button}) ->
    return if IV.img.dirty
    IV<[ next prev ]>[button]!

  dragstart: (IV{clientX:x, clientY:y}) ->
    $ window
      &on \mousemove IV.dragmove
      &on \mouseup   IV.dragend

  dragmove: ({clientX:x, clientY:y}) ->
    IV
      &overlay.scrollBy IV.x - x, IV.y - y
      &x = x
      &y = y

  dragend: ->
    $ window
      &off \mousemove IV.dragmove
      &off \mouseup   IV.dragend

  css: '''
  ::-webkit-scrollbar {
    height: 1px;
    width:  1px;
    background-color: black;
  }
  ::-webkit-scrollbar-thumb {
    background-color: white;
  }

  body {
    overflow: hidden;
  }

  #iv {
    z-index: 999;
    overflow: auto;
    -webkit-user-select: none;
       -moz-user-select: none;
    display: -webkit-flex;
    top:    0;
    left:   0;
    right:  0;
    bottom: 0;
    position: fixed;
    background-color: black;
  }

  #iv > img {
    pointer-events: none;
    /*
    * https://developer.mozilla.org/en-US/docs/CSS/Tutorials/Using_CSS_flexible_boxes#Flex_item_considerations
    * flex items will stay centered, even if they overflow the flex container.
    * This can sometimes be problematic, however, if they overflow past the top
    * edge of the page ... as you can't scroll to that area, even if there is
    * content there!  ... For now, you can instead use margins to achieve
    * centering
    */
    margin: auto;
  }

  #iv-meta {
    margin: 0;
    text-align: right;
    list-style-type: none;
    position: fixed;
    top: 0;
    right: 0;
    color: white;
    font-family: monospace;
    font-size: 12pt;
    text-shadow: black 0 0 3px, black 0 0 7px;
  }
  '''

module.exports = IV.init
